<?php

namespace Drupal\gks_custom_migration\Plugin\migrate\source;

use Drupal\migrate\Row;
use Drupal\user\Plugin\migrate\source\d7\User as d7_user;

/**
 * User entities from the d7 database.
 *
 * @MigrateSource(
 *   id = "firstlast",
 *   source_module = "user"
 * )
 */
class Namefirstlast extends d7_user {

  /**
   * {@inheritdoc}
   */
  public function prepareRow(Row $row) {
    // general example is to use universal plugin based on SqlBase class as in https://www.drupal.org/docs/8/api/migrate-api/migrate-source-plugins/migrating-data-from-a-sql-source
    // https://www.drupal.org/docs/drupal-apis/migrate-api/migrate-destination-plugins-examples/migrating-users
    // We may also extend existing ones, like in a case: If you need to migrate the field from the Drupal 7 to the Drupal 8 user entity
    // you can also just EXTEND the EXISTING (that was generated by drupal_upgrade) in our case 'd7_user' PLUGIN and query for the additional field data.
    // even usually we use 'extends SqlBase'
    // Iâ€™m executing an extra query for each user
    // (because the code is in the prepareRow() method),
    // rather than attempting to pull all the data as part of the query in the query() method of the class.

    $uid = $row->getSourceProperty('uid');

    $fields = $this->getPersonProfileFields($uid);
    $first_name='';
    // all fields stay as-is (as in 'd7_user' auto-generated source) except two added fields which we combine into one, to have First and Last names in one field.
    if (!empty($fields)) {
      foreach ($fields as $data_row) {
        foreach ($data_row as $field => $value) {
          If ($field == 'field_first_name_value'){
            $first_name=$value;
          }
          If ($field == 'field_last_name_value'){
            $value=$first_name . ' ' . $value;
          }
          $row->setSourceProperty($field, $value);
        }
      }
    }
//    $stop=1;
    return parent::prepareRow($row);
  }

  /**
   * Returns an already-executed Drupal query containing D7 user fields, to which we add two fields by leftJoin().
   *
   * @param int $uid
   *   User ID.
   *
   * @return \Drupal\Core\Database\StatementInterface|null
   *   Already-executed database query object.
   */
  private function getPersonProfileFields($uid) {
    $query = $this->select('users', 'u');
    $query->condition('u.uid', $uid);
    $query->leftJoin('field_data_field_first_name',
      'first', 'first.entity_id = u.uid');
    $query->fields('first', [
      'field_first_name_value'
    ]);
    $query->leftJoin('field_data_field_last_name',
      'last', 'last.entity_id = u.uid');
    $query->fields('last', [
      'field_last_name_value'
    ]);

    $name_result = $query->execute();
//    $stop=1;
    return $name_result;
  }

}
